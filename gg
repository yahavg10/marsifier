.
├── app.py                # Main FastAPI application
├── endpoint_registry.py  # Central registry with auto-discovery
├── decorators.py         # @endpoint decorator
├── handlers/             # Directory for all handler modules
│   ├── __init__.py       # Makes this directory a package
│   ├── item_handlers.py  # Handlers related to items
│   └── new_feature_handlers.py  # Handlers for new features
└── models.py             # (Optional) Pydantic models





# handlers/new_feature_handlers.py
from decorators import endpoint

@endpoint("/new-feature", "get", response_model=dict)
def new_feature_handler():
    return {"message": "This is a new feature!"}



# app.py
from fastapi import FastAPI
from endpoint_registry import endpoint_registry

app = FastAPI()

# Discover handlers from the "handlers" package
endpoint_registry.discover_handlers("handlers")

# Register endpoints dynamically
for endpoint in endpoint_registry.get_endpoints():
    if endpoint["method"] == "get":
        app.get(endpoint["path"], response_model=endpoint["response_model"])(endpoint["handler"])
    elif endpoint["method"] == "post":
        app.post(endpoint["path"], response_model=endpoint["response_model"])(endpoint["handler"])
    elif endpoint["method"] == "delete":
        app.delete(endpoint["path"], response_model=endpoint["response_model"])(endpoint["handler"])



# handlers/item_handlers.py
from fastapi import HTTPException
from pydantic import BaseModel
from decorators import endpoint

# Request Model
class ItemCreate(BaseModel):
    name: str

@endpoint("/item/{item_id}", "get", response_model=dict)
def get_item_handler(item_id: int):
    if item_id < 0:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": item_id, "name": f"Item {item_id}"}

@endpoint("/item", "post", response_model=dict)
def create_item_handler(item: ItemCreate):
    return {"item_id": 1, "name": item.name}




# decorators.py
from typing import Callable, Type
from endpoint_registry import endpoint_registry

def endpoint(path: str, method: str, response_model: Type = None):
    """Registers a handler function as an endpoint."""
    def decorator(func: Callable):
        endpoint_registry.register(path, method, func, response_model)
        return func
    return decorator



# endpoint_registry.py
import importlib
import pkgutil
from typing import Callable, Dict, Type

class EndpointRegistry:
    def __init__(self):
        self.registry = []

    def register(
        self, 
        path: str, 
        method: str, 
        handler: Callable, 
        response_model: Type = None
    ):
        """Registers an endpoint."""
        self.registry.append({
            "path": path,
            "method": method,
            "handler": handler,
            "response_model": response_model,
        })

    def get_endpoints(self):
        """Returns all registered endpoints."""
        return self.registry

    def discover_handlers(self, module_name: str):
        """Discovers handlers in a module or package."""
        module = importlib.import_module(module_name)
        if hasattr(module, "__path__"):  # If the module is a package
            for _, name, is_pkg in pkgutil.walk_packages(module.__path__, module.__name__ + "."):
                if not is_pkg:
                    importlib.import_module(name)

endpoint_registry = EndpointRegistry()
